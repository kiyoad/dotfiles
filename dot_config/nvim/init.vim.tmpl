{{ if (eq .chezmoi.os "darwin") }}
" Mac only
set shell=/bin/zsh
{{ else }}
set shell=/usr/bin/zsh
{{ end }}
set shiftwidth=4
set tabstop=4
set expandtab
set textwidth=0
set autoindent
set hlsearch
set clipboard=unnamed
set number
syntax on

let mapleader="\<Space>"

noremap  <C-[> <esc>
noremap! <C-[> <esc>
inoremap <silent> jj <esc>

function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

call plug#begin()

" A light and configurable statusline/tabline plugin for Vim
Plug 'itchyny/lightline.vim', Cond(!exists('g:vscode'))

" VSC like color theme https://github.com/ntk148v/vim-horizon
Plug 'ntk148v/vim-horizon', Cond(!exists('g:vscode'))

" File Tree Viewer https://github.com/lambdalisue/fern.vim
Plug 'lambdalisue/fern.vim', Cond(!exists('g:vscode'))

" fzf wrapper https://github.com/junegunn/fzf.vim
"--------
"
"| Command           | List                                                                                  |
"| ---               | ---                                                                                   |
"| `:Files [PATH]`   | Files (runs `$FZF_DEFAULT_COMMAND` if defined)                                        |
"| `:GFiles [OPTS]`  | Git files (`git ls-files`)                                                            |
"| `:GFiles?`        | Git files (`git status`)                                                              |
"| `:Buffers`        | Open buffers                                                                          |
"| `:Colors`         | Color schemes                                                                         |
"| `:Ag [PATTERN]`   | [ag][ag] search result (`ALT-A` to select all, `ALT-D` to deselect all)               |
"| `:Rg [PATTERN]`   | [rg][rg] search result (`ALT-A` to select all, `ALT-D` to deselect all)               |
"| `:Lines [QUERY]`  | Lines in loaded buffers                                                               |
"| `:BLines [QUERY]` | Lines in the current buffer                                                           |
"| `:Tags [QUERY]`   | Tags in the project (`ctags -R`)                                                      |
"| `:BTags [QUERY]`  | Tags in the current buffer                                                            |
"| `:Marks`          | Marks                                                                                 |
"| `:Windows`        | Windows                                                                               |
"| `:Locate PATTERN` | `locate` command output                                                               |
"| `:History`        | `v:oldfiles` and open buffers                                                         |
"| `:History:`       | Command history                                                                       |
"| `:History/`       | Search history                                                                        |
"| `:Snippets`       | Snippets ([UltiSnips][us])                                                            |
"| `:Commits`        | Git commits (requires [fugitive.vim][f])                                              |
"| `:BCommits`       | Git commits for the current buffer; visual-select lines to track changes in the range |
"| `:Commands`       | Commands                                                                              |
"| `:Maps`           | Normal mode mappings                                                                  |
"| `:Helptags`       | Help tags <sup id="a1">[1](#helptags)</sup>                                           |
"| `:Filetypes`      | File types
"
"- Most commands support `CTRL-T` / `CTRL-X` / `CTRL-V` key
"  bindings to open in a new tab, a new split, or in a new vertical split
"- Bang-versions of the commands (e.g. `Ag!`) will open fzf in fullscreen
"- You can set `g:fzf_command_prefix` to give the same prefix to the commands
"    - e.g. `let g:fzf_command_prefix = 'Fzf'` and you have `FzfFiles`, etc.
"
"(<a name="helptags">1</a>: `Helptags` will shadow the command of the same name
"from [pathogen][pat]. But its functionality is still available via `call
"pathogen#helptags()`. [↩](#a1))
"
"[pat]: https://github.com/tpope/vim-pathogen
"[f]:   https://github.com/tpope/vim-fugitive

Plug 'junegunn/fzf', Cond(!exists('g:vscode'), {'do': { -> fzf#install() }})
Plug 'junegunn/fzf.vim', Cond(!exists('g:vscode'))

" Fugitive is the premier Vim plugin for Git. https://github.com/tpope/vim-fugitive
" :Git or :G commit, :G diff, :G blame ... :help fugitive
Plug 'tpope/vim-fugitive', Cond(!exists('g:vscode'))

" Comment stuff out. :help commentary
Plug 'tpope/vim-commentary', Cond(!exists('g:vscode'))

" Surround.vim is all about "surroundings": parentheses, brackets, quotes, XML tags, and more.
" :help surround
Plug 'tpope/vim-surround'

" A Vim plugin which shows a git diff in the sign column. :help gitgutter
Plug 'airblade/vim-gitgutter', Cond(!exists('g:vscode'))

" A collection of language packs for Vim. :help polyglot
Plug 'sheerun/vim-polyglot', Cond(!exists('g:vscode'))

" Make your vim/neovim smart as VSCode https://github.com/neoclide/coc.nvim
" :help coc-nvim  *** use node command ***
Plug 'neoclide/coc.nvim', Cond(!exists('g:vscode'), {'branch': 'release'})

" EasyMotion provides a much simpler way to use some motions in vim.
" :help easymotion
Plug 'easymotion/vim-easymotion', Cond(!exists('g:vscode'))
Plug 'asvetliakov/vim-easymotion', Cond(exists('g:vscode'), { 'as': 'vsc-easymotion' })

" SKK Japanese input method
Plug 'vim-skk/eskk.vim', Cond(!exists('g:vscode'))

call plug#end()

if !exists('g:vscode')
  let g:fern#default_hidden = 1
  nnoremap <silent> <Leader>f :<C-u>Fern . -reveal=% -drawer -toggle -width=40<CR>

  let g:gitgutter_highlight_lines = 1

  " Gtags bindings
  nmap <C-g> :Gtags -g<SPACE>
  nmap <C-h> :Gtags -f %<CR>
  nmap <C-j> :GtagsCursor<CR>
  nmap <C-n> :cn<CR>
  nmap <C-p> :cp<CR>

  set termguicolors
  colorscheme horizon

  function L_eskk_get_mode()
      if (mode() == 'i') && eskk#is_enabled()
          return g:eskk#statusline_mode_strings[eskk#get_mode()]
      else
          return ''
      endif
  endfunction
  
  let g:lightline = {
  \   'active': {
  \     'left': [ ['mode', 'paste'], ['readonly', 'filename', 'eskk', 'modified'] ]
  \   },
  \   'component_function': {
  \     'eskk': 'L_eskk_get_mode'
  \   },
  \ }
  let g:lightline.colorscheme = 'horizon'

  " SKK settings
  if !filereadable(expand('~/.config/eskk/SKK-JISYO.L'))
    call mkdir(expand('~/.config/eskk'), 'p')
    call system('cd ~/.config/eskk/ && wget https://skk-dev.github.io/dict/SKK-JISYO.L.gz && gzip -d SKK-JISYO.L.gz')
  endif
  let g:eskk#directory = "~/.config/eskk"
  let g:eskk#dictionary = { 'path': "~/.config/eskk/my_jisyo", 'sorted': 1, 'encoding': 'utf-8',}
  let g:eskk#large_dictionary = {'path': "~/.config/eskk/SKK-JISYO.L", 'sorted': 1, 'encoding': 'euc-jp',}
  
  augroup vimrc_eskk
    autocmd!
    autocmd User eskk-enable-post lmap <buffer> l <Plug>(eskk:disable)
  augroup END
    
  imap jk <Plug>(eskk:toggle)
  cmap jk <Plug>(eskk:toggle)
  
  " SKK keybindings
  " (insert mode)jk : 全角ひらがな入力
  " (Insert mode(SKK))q : 全角カタカナ<->全角ひらがな
  " (Insert mode(SKK))CTRL-q : 半角カタカナ<->全角ひらがな
  " (Insert mode(SKK))L : 全角英数入力(CTRL-j で戻る)
  " (Insert mode(SKK))l : 半角英数入力(insert mode)に戻る
  " (Insert mode(SKK:SHIFTで入力開始))SPACE : 変換
  " (Insert mode(SKK:SHIFTで入力開始))CTRL-j : 確定
  " (Insert mode(SKK:SHIFTで入力開始))CTRL-g : 入力キャンセル
  " (Insert mode(SKK:SHIFTで入力開始))q : 全角ひらがなで入力していたら全角カタカナに変換する
  " (Insert mode(SKK:変換中))x : 変換候補を戻る
  " (Insert mode(SKK:変換中))CTRL-g : 変換中止

endif

